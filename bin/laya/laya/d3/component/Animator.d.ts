import { Component } from "../../components/Component";
import { Avatar } from "../core/Avatar";
import { Sprite3D } from "../core/Sprite3D";
import { AnimatorControllerLayer } from "./AnimatorControllerLayer";
import { AnimatorPlayState } from "./AnimatorPlayState";
import { AnimatorState } from "./AnimatorState";
export declare class Animator extends Component {
    private static _tempVector30;
    private static _tempVector31;
    private static _tempQuaternion0;
    private static _tempQuaternion1;
    private static _tempVector3Array0;
    private static _tempVector3Array1;
    private static _tempQuaternionArray0;
    private static _tempQuaternionArray1;
    static CULLINGMODE_ALWAYSANIMATE: number;
    static CULLINGMODE_CULLCOMPLETELY: number;
    private _speed;
    private _keyframeNodeOwnerMap;
    private _keyframeNodeOwners;
    private _updateMark;
    private _controllerLayers;
    cullingMode: number;
    speed: number;
    constructor();
    private _linkToSprites;
    private _addKeyframeNodeOwner;
    private _updatePlayer;
    private _eventScript;
    private _updateEventScript;
    private _updateClipDatas;
    private _applyFloat;
    private _applyPositionAndRotationEuler;
    private _applyRotation;
    private _applyScale;
    private _applyCrossData;
    private _setClipDatasToNode;
    private _setCrossClipDatasToNode;
    private _setFixedCrossClipDatasToNode;
    private _revertDefaultKeyframeNodes;
    _onAdded(): void;
    protected _onDestroy(): void;
    protected _onEnable(): void;
    protected _onDisable(): void;
    _parse(data: any): void;
    getDefaultState(layerIndex?: number): AnimatorState;
    addState(state: AnimatorState, layerIndex?: number): void;
    removeState(state: AnimatorState, layerIndex?: number): void;
    addControllerLayer(controllderLayer: AnimatorControllerLayer): void;
    getControllerLayer(layerInex?: number): AnimatorControllerLayer;
    getCurrentAnimatorPlayState(layerInex?: number): AnimatorPlayState;
    play(name?: string, layerIndex?: number, normalizedTime?: number): void;
    crossFade(name: string, transitionDuration: number, layerIndex?: number, normalizedTime?: number): void;
    private _avatar;
    avatar: Avatar;
    private _getAvatarOwnersAndInitDatasAsync;
    private _isLinkSpriteToAnimationNode;
    private _isLinkSpriteToAnimationNodeData;
    linkSprite3DToAvatarNode(nodeName: string, sprite3D: Sprite3D): boolean;
    unLinkSprite3DToAvatarNode(sprite3D: Sprite3D): boolean;
}
