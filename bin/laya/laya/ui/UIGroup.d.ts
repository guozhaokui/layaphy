import { Box } from "./Box";
import { IItem } from "./IItem";
import { ISelect } from "./ISelect";
import { Sprite } from "../display/Sprite";
import { Handler } from "../utils/Handler";
export declare class UIGroup extends Box implements IItem {
    selectHandler: Handler;
    protected _items: ISelect[];
    protected _selectedIndex: number;
    protected _skin: string;
    protected _direction: string;
    protected _space: number;
    protected _labels: string;
    protected _labelColors: string;
    private _labelFont;
    protected _labelStrokeColor: string;
    protected _strokeColors: string;
    protected _labelStroke: number;
    protected _labelSize: number;
    protected _labelBold: boolean;
    protected _labelPadding: string;
    protected _labelAlign: string;
    protected _stateNum: number;
    protected _labelChanged: boolean;
    constructor(labels?: string, skin?: string);
    protected preinitialize(): void;
    destroy(destroyChild?: boolean): void;
    addItem(item: ISelect, autoLayOut?: boolean): number;
    delItem(item: ISelect, autoLayOut?: boolean): void;
    initItems(): void;
    protected itemClick(index: number): void;
    selectedIndex: number;
    protected setSelect(index: number, selected: boolean): void;
    skin: string;
    protected _skinLoaded(): void;
    labels: string;
    protected createItem(skin: string, label: string): Sprite;
    labelColors: string;
    labelStroke: number;
    labelStrokeColor: string;
    strokeColors: string;
    labelSize: number;
    stateNum: number;
    labelBold: boolean;
    labelFont: string;
    labelPadding: string;
    direction: string;
    space: number;
    protected changeLabels(): void;
    protected commitMeasure(): void;
    readonly items: ISelect[];
    selection: ISelect;
    dataSource: any;
    protected _setLabelChanged(): void;
}
