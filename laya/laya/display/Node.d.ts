import { Component } from "../components/Component";
import { EventDispatcher } from "../events/EventDispatcher";
import { Timer } from "../utils/Timer";
export declare class Node extends EventDispatcher {
    protected static ARRAY_EMPTY: any[];
    private _bits;
    name: string;
    destroyed: boolean;
    constructor();
    on(type: string, caller: any, listener: Function, args?: any[]): EventDispatcher;
    once(type: string, caller: any, listener: Function, args?: any[]): EventDispatcher;
    destroy(destroyChild?: boolean): void;
    onDestroy(): void;
    destroyChildren(): void;
    addChild(node: Node): Node;
    addInputChild(node: Node): Node;
    removeInputChild(node: Node): void;
    addChildren(...args: any[]): void;
    addChildAt(node: Node, index: number): Node;
    getChildIndex(node: Node): number;
    getChildByName(name: string): Node;
    getChildAt(index: number): Node;
    setChildIndex(node: Node, index: number): Node;
    protected _childChanged(child?: Node): void;
    removeChild(node: Node): Node;
    removeSelf(): Node;
    removeChildByName(name: string): Node;
    removeChildAt(index: number): Node;
    removeChildren(beginIndex?: number, endIndex?: number): Node;
    readonly numChildren: number;
    readonly parent: Node;
    protected _setParent(value: Node): void;
    readonly displayedInStage: boolean;
    private _updateDisplayedInstage;
    private _displayChild;
    contains(node: Node): boolean;
    timerLoop(delay: number, caller: any, method: Function, args?: any[], coverBefore?: boolean, jumpFrame?: boolean): void;
    timerOnce(delay: number, caller: any, method: Function, args?: any[], coverBefore?: boolean): void;
    frameLoop(delay: number, caller: any, method: Function, args?: any[], coverBefore?: boolean): void;
    frameOnce(delay: number, caller: any, method: Function, args?: any[], coverBefore?: boolean): void;
    clearTimer(caller: any, method: Function): void;
    callLater(method: Function, args?: any[]): void;
    runCallLater(method: Function): void;
    private _components;
    private _activeChangeScripts;
    readonly scene: any;
    active: boolean;
    readonly activeInHierarchy: boolean;
    protected _onActive(): void;
    protected _onInActive(): void;
    protected _onActiveInScene(): void;
    protected _onInActiveInScene(): void;
    onAwake(): void;
    onEnable(): void;
    private _activeScripts;
    private _processInActive;
    private _inActiveScripts;
    onDisable(): void;
    protected _onAdded(): void;
    protected _onRemoved(): void;
    addComponentIntance(comp: Component): any;
    addComponent(type: new () => any): any;
    getComponent(clas: any): any;
    getComponents(clas: any): any[];
    readonly timer: Timer;
}
