import { CubeMap } from "./CubeMap";
import { CubeInfo } from "./CubeInfo";
import { SubCubeGeometry } from "./SubCubeGeometry";
import { GeometryElement } from "laya/d3/core/GeometryElement";
import { MeshSprite3D } from "laya/d3/core/MeshSprite3D";
import { BlinnPhongMaterial } from "laya/d3/core/material/BlinnPhongMaterial";
import { RenderContext3D } from "laya/d3/core/render/RenderContext3D";
import { CubeSprite3D } from "./CubeSprite3D";
import { Byte } from "laya/utils/Byte";
export declare class CubeGeometry extends GeometryElement {
    private static _type;
    static CUBEINDEX: number;
    static HLAFMAXSIZE: number;
    static POINTS: any[];
    private _modifyCubes;
    cubeMap: CubeMap;
    subBoxMap: any;
    static updateCubeCount: number;
    enableUpdate: boolean;
    cubeSprite3D: CubeSprite3D;
    IsRender: boolean;
    constructor(cubeGeometry: CubeSprite3D);
    addCube(x: number, y: number, z: number, color: number, isUpdataAO?: boolean): number;
    removeCube(x: number, y: number, z: number, isUpdataAO?: boolean): number;
    updateColor(x: number, y: number, z: number, color: number): number;
    updateAO(cube: CubeInfo): void;
    updataProperty(x: number, y: number, z: number, Property: number): number;
    private calOneCubeAO;
    findCube(x: number, y: number, z: number): number;
    findCubeToCubeInfo(x: number, y: number, z: number): CubeInfo;
    _getType(): number;
    _prepareRender(state: RenderContext3D): boolean;
    _render(state: RenderContext3D): void;
    clear(): void;
    destroy(): void;
    ExportCubeMeshLm(): void;
    static shareMaterial: BlinnPhongMaterial;
    static initStaticBlin(): void;
    lmToMeshSprite3D(byte: Byte): MeshSprite3D;
    compressData(): Byte;
    calOneCubeSurface(cubeinfo: CubeInfo, posArray: number[], nolArray: number[], colArray: number[]): void;
    PanDuanFloatXiangDeng(x1: number, x2: number): boolean;
    existAo(cubeinfo: CubeInfo, VBIndex: number): boolean;
    calOneFaceSurface(cubeinfo: CubeInfo, faceIndex: number, vertexArray: number[]): boolean;
    calOneFaceColor(subcubeGeometry: SubCubeGeometry, VBIndex: number, cubeinfo: CubeInfo, colArray: number[], vertexArray: number[], faceIndex: number): void;
}
