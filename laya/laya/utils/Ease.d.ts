export declare class Ease {
    private static HALF_PI;
    private static PI2;
    static linearNone(t: number, b: number, c: number, d: number): number;
    static linearIn(t: number, b: number, c: number, d: number): number;
    static linearInOut(t: number, b: number, c: number, d: number): number;
    static linearOut(t: number, b: number, c: number, d: number): number;
    static bounceIn(t: number, b: number, c: number, d: number): number;
    static bounceInOut(t: number, b: number, c: number, d: number): number;
    static bounceOut(t: number, b: number, c: number, d: number): number;
    static backIn(t: number, b: number, c: number, d: number, s?: number): number;
    static backInOut(t: number, b: number, c: number, d: number, s?: number): number;
    static backOut(t: number, b: number, c: number, d: number, s?: number): number;
    static elasticIn(t: number, b: number, c: number, d: number, a?: number, p?: number): number;
    static elasticInOut(t: number, b: number, c: number, d: number, a?: number, p?: number): number;
    static elasticOut(t: number, b: number, c: number, d: number, a?: number, p?: number): number;
    static strongIn(t: number, b: number, c: number, d: number): number;
    static strongInOut(t: number, b: number, c: number, d: number): number;
    static strongOut(t: number, b: number, c: number, d: number): number;
    static sineInOut(t: number, b: number, c: number, d: number): number;
    static sineIn(t: number, b: number, c: number, d: number): number;
    static sineOut(t: number, b: number, c: number, d: number): number;
    static quintIn(t: number, b: number, c: number, d: number): number;
    static quintInOut(t: number, b: number, c: number, d: number): number;
    static quintOut(t: number, b: number, c: number, d: number): number;
    static quartIn(t: number, b: number, c: number, d: number): number;
    static quartInOut(t: number, b: number, c: number, d: number): number;
    static quartOut(t: number, b: number, c: number, d: number): number;
    static cubicIn(t: number, b: number, c: number, d: number): number;
    static cubicInOut(t: number, b: number, c: number, d: number): number;
    static cubicOut(t: number, b: number, c: number, d: number): number;
    static quadIn(t: number, b: number, c: number, d: number): number;
    static quadInOut(t: number, b: number, c: number, d: number): number;
    static quadOut(t: number, b: number, c: number, d: number): number;
    static expoIn(t: number, b: number, c: number, d: number): number;
    static expoInOut(t: number, b: number, c: number, d: number): number;
    static expoOut(t: number, b: number, c: number, d: number): number;
    static circIn(t: number, b: number, c: number, d: number): number;
    static circInOut(t: number, b: number, c: number, d: number): number;
    static circOut(t: number, b: number, c: number, d: number): number;
}
