import { Matrix4x4 } from "../math/Matrix4x4";
import { Vector4 } from "../math/Vector4";
import { SkyRenderer } from "../resource/models/SkyRenderer";
import { Shader3D } from "../shader/Shader3D";
import { Sprite3D } from "./Sprite3D";
export declare class BaseCamera extends Sprite3D {
    static _tempMatrix4x40: Matrix4x4;
    static CAMERAPOS: number;
    static VIEWMATRIX: number;
    static PROJECTMATRIX: number;
    static VIEWPROJECTMATRIX: number;
    static CAMERADIRECTION: number;
    static CAMERAUP: number;
    static RENDERINGTYPE_DEFERREDLIGHTING: string;
    static RENDERINGTYPE_FORWARDRENDERING: string;
    static CLEARFLAG_SOLIDCOLOR: number;
    static CLEARFLAG_SKY: number;
    static CLEARFLAG_DEPTHONLY: number;
    static CLEARFLAG_NONE: number;
    protected static _invertYScaleMatrix: Matrix4x4;
    protected static _invertYProjectionMatrix: Matrix4x4;
    protected static _invertYProjectionViewMatrix: Matrix4x4;
    private _nearPlane;
    private _farPlane;
    private _fieldOfView;
    private _orthographicVerticalSize;
    private _skyRenderer;
    private _forward;
    private _up;
    clearFlag: number;
    clearColor: Vector4;
    cullingMask: number;
    useOcclusionCulling: boolean;
    readonly skyRenderer: SkyRenderer;
    fieldOfView: number;
    nearPlane: number;
    farPlane: number;
    orthographic: boolean;
    orthographicVerticalSize: number;
    renderingOrder: number;
    constructor(nearPlane?: number, farPlane?: number);
    _sortCamerasByRenderingOrder(): void;
    render(shader?: Shader3D, replacementTag?: string): void;
    addLayer(layer: number): void;
    removeLayer(layer: number): void;
    addAllLayers(): void;
    removeAllLayers(): void;
    resetProjectionMatrix(): void;
    protected _onActive(): void;
    protected _onInActive(): void;
    _parse(data: any, spriteMap: any): void;
    destroy(destroyChild?: boolean): void;
}
