import { EventDispatcher } from "../events/EventDispatcher";
import { Handler } from "../utils/Handler";
export declare class LoaderManager extends EventDispatcher {
    private static _resMap;
    static createMap: any;
    retryNum: number;
    retryDelay: number;
    maxLoader: number;
    private _loaders;
    private _loaderCount;
    private _resInfos;
    private _infoPool;
    private _maxPriority;
    private _failRes;
    private _statInfo;
    getProgress(): number;
    resetProgress(): void;
    constructor();
    create(url: any, complete?: Handler, progress?: Handler, type?: string, constructParams?: any[], propertyParams?: any, priority?: number, cache?: boolean): void;
    private _createOne;
    load(url: any, complete?: Handler, progress?: Handler, type?: string, priority?: number, cache?: boolean, group?: string, ignoreCache?: boolean, useWorkerLoader?: boolean): LoaderManager;
    private _resInfoLoaded;
    private _next;
    private _doLoad;
    private _endLoad;
    private _addReTry;
    clearRes(url: string): void;
    clearTextureRes(url: string): void;
    getRes(url: string): any;
    cacheRes(url: string, data: any): void;
    setGroup(url: string, group: string): void;
    clearResByGroup(group: string): void;
    static cacheRes(url: string, data: any): void;
    clearUnLoaded(): void;
    cancelLoadByUrls(urls: any[]): void;
    cancelLoadByUrl(url: string): void;
    private _loadAssets;
    decodeBitmaps(urls: any[]): void;
    private _decodeTexture;
}
