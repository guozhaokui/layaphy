import { HttpRequest } from "./HttpRequest";
import { EventDispatcher } from "../events/EventDispatcher";
export declare class Loader extends EventDispatcher {
    static TEXT: string;
    static JSON: string;
    static PREFAB: string;
    static XML: string;
    static BUFFER: string;
    static IMAGE: string;
    static SOUND: string;
    static ATLAS: string;
    static FONT: string;
    static TTF: string;
    static PLF: string;
    static PLFB: string;
    static HIERARCHY: string;
    static MESH: string;
    static MATERIAL: string;
    static TEXTURE2D: string;
    static TEXTURECUBE: string;
    static ANIMATIONCLIP: string;
    static AVATAR: string;
    static TERRAINHEIGHTDATA: string;
    static TERRAINRES: string;
    static typeMap: any;
    static parserMap: any;
    static maxTimeOut: number;
    static groupMap: any;
    static loadedMap: any;
    protected static atlasMap: any;
    static preLoadedMap: any;
    protected static _imgCache: any;
    protected static _loaders: any[];
    protected static _isWorking: boolean;
    protected static _startIndex: number;
    static getTypeFromUrl(url: string): string;
    protected _url: string;
    protected _type: string;
    protected _http: HttpRequest;
    protected _useWorkerLoader: boolean;
    load(url: string, type?: string, cache?: boolean, group?: string, ignoreCache?: boolean, useWorkerLoader?: boolean): void;
    _loadResourceFilter(type: string, url: string): void;
    private _loadHttpRequest;
    private _loadHtmlImage;
    _loadHttpRequestWhat(url: string, contentType: string): void;
    protected _loadTTF(url: string): void;
    protected _loadImage(url: string): void;
    _loadSound(url: string): void;
    protected onProgress(value: number): void;
    protected onError(message: string): void;
    protected onLoaded(data?: any): void;
    private parsePLFData;
    private parsePLFBData;
    private parseOnePLFBFile;
    protected complete(data: any): void;
    private static checkNext;
    endLoad(content?: any): void;
    readonly url: string;
    readonly type: string;
    readonly cache: boolean;
    readonly data: any;
    static clearRes(url: string): void;
    static clearTextureRes(url: string): void;
    static getRes(url: string): any;
    static getAtlas(url: string): any[];
    static cacheRes(url: string, data: any): void;
    static setGroup(url: string, group: string): void;
    static clearResByGroup(group: string): void;
}
