import { Resource } from "../../../resource/Resource";
import { Handler } from "../../../utils/Handler";
import { DefineDatas } from "../../shader/DefineDatas";
import { ShaderData } from "../../shader/ShaderData";
import { ShaderDefines } from "../../shader/ShaderDefines";
import { IClone } from "../IClone";
export declare class BaseMaterial extends Resource implements IClone {
    static MATERIAL: string;
    static RENDERQUEUE_OPAQUE: number;
    static RENDERQUEUE_ALPHATEST: number;
    static RENDERQUEUE_TRANSPARENT: number;
    static ALPHATESTVALUE: number;
    static SHADERDEFINE_ALPHATEST: number;
    static shaderDefines: ShaderDefines;
    static load(url: string, complete: Handler): void;
    static _parse(data: any, propertyParams?: any, constructParams?: any[]): BaseMaterial;
    private _alphaTest;
    _shaderValues: ShaderData;
    renderQueue: number;
    alphaTestValue: number;
    alphaTest: boolean;
    constructor();
    private _removeTetxureReference;
    _addReference(count?: number): void;
    _removeReference(count?: number): void;
    protected _disposeResource(): void;
    setShaderName(name: string): void;
    cloneTo(destObject: any): void;
    clone(): any;
    readonly _defineDatas: DefineDatas;
}
