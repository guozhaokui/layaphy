import { Vector3 } from "./Vector3";
import { Matrix4x4 } from "./Matrix4x4";
import { Matrix3x3 } from "./Matrix3x3";
import { IClone } from "../core/IClone";
export declare class Quaternion implements IClone {
    static DEFAULT: Quaternion;
    static NAN: Quaternion;
    static createFromYawPitchRoll(yaw: number, pitch: number, roll: number, out: Quaternion): void;
    static multiply(left: Quaternion, right: Quaternion, out: Quaternion): void;
    private static arcTanAngle;
    private static angleTo;
    static createFromAxisAngle(axis: Vector3, rad: number, out: Quaternion): void;
    static createFromMatrix4x4(mat: Matrix4x4, out: Quaternion): void;
    static slerp(left: Quaternion, right: Quaternion, t: number, out: Quaternion): Quaternion;
    static lerp(left: Quaternion, right: Quaternion, amount: number, out: Quaternion): void;
    static add(left: Quaternion, right: Quaternion, out: Quaternion): void;
    static dot(left: Quaternion, right: Quaternion): number;
    x: number;
    y: number;
    z: number;
    w: number;
    constructor(x?: number, y?: number, z?: number, w?: number, nativeElements?: Float32Array);
    scaling(scaling: number, out: Quaternion): void;
    normalize(out: Quaternion): void;
    length(): number;
    rotateX(rad: number, out: Quaternion): void;
    rotateY(rad: number, out: Quaternion): void;
    rotateZ(rad: number, out: Quaternion): void;
    getYawPitchRoll(out: Vector3): void;
    invert(out: Quaternion): void;
    identity(): void;
    fromArray(array: any[], offset?: number): void;
    cloneTo(destObject: any): void;
    clone(): any;
    equals(b: Quaternion): boolean;
    static rotationLookAt(forward: Vector3, up: Vector3, out: Quaternion): void;
    static lookAt(eye: Vector3, target: Vector3, up: Vector3, out: Quaternion): void;
    lengthSquared(): number;
    static invert(value: Quaternion, out: Quaternion): void;
    static rotationMatrix(matrix3x3: Matrix3x3, out: Quaternion): void;
    forNativeElement(nativeElements?: Float32Array): void;
}
