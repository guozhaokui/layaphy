import { Vector3 } from "./Vector3";
import { Quaternion } from "./Quaternion";
import { IClone } from "../core/IClone";
export declare class Matrix4x4 implements IClone {
    static DEFAULT: Matrix4x4;
    static ZERO: Matrix4x4;
    static createRotationX(rad: number, out: Matrix4x4): void;
    static createRotationY(rad: number, out: Matrix4x4): void;
    static createRotationZ(rad: number, out: Matrix4x4): void;
    static createRotationYawPitchRoll(yaw: number, pitch: number, roll: number, result: Matrix4x4): void;
    static createRotationAxis(axis: Vector3, angle: number, result: Matrix4x4): void;
    setRotation(rotation: Quaternion): void;
    setPosition(position: Vector3): void;
    static createRotationQuaternion(rotation: Quaternion, result: Matrix4x4): void;
    static createTranslate(trans: Vector3, out: Matrix4x4): void;
    static createScaling(scale: Vector3, out: Matrix4x4): void;
    static multiply(left: Matrix4x4, right: Matrix4x4, out: Matrix4x4): void;
    static multiplyForNative(left: Matrix4x4, right: Matrix4x4, out: Matrix4x4): void;
    static createFromQuaternion(rotation: Quaternion, out: Matrix4x4): void;
    static createAffineTransformation(trans: Vector3, rot: Quaternion, scale: Vector3, out: Matrix4x4): void;
    static createLookAt(eye: Vector3, target: Vector3, up: Vector3, out: Matrix4x4): void;
    static createPerspective(fov: number, aspect: number, znear: number, zfar: number, out: Matrix4x4): void;
    static createPerspectiveOffCenter(left: number, right: number, bottom: number, top: number, znear: number, zfar: number, out: Matrix4x4): void;
    static createOrthoOffCenter(left: number, right: number, bottom: number, top: number, znear: number, zfar: number, out: Matrix4x4): void;
    elements: Float32Array;
    constructor(m11?: number, m12?: number, m13?: number, m14?: number, m21?: number, m22?: number, m23?: number, m24?: number, m31?: number, m32?: number, m33?: number, m34?: number, m41?: number, m42?: number, m43?: number, m44?: number, elements?: Float32Array);
    getElementByRowColumn(row: number, column: number): number;
    setElementByRowColumn(row: number, column: number, value: number): void;
    equalsOtherMatrix(other: Matrix4x4): boolean;
    decomposeTransRotScale(translation: Vector3, rotation: Quaternion, scale: Vector3): boolean;
    decomposeTransRotMatScale(translation: Vector3, rotationMatrix: Matrix4x4, scale: Vector3): boolean;
    decomposeYawPitchRoll(yawPitchRoll: Vector3): void;
    normalize(): void;
    transpose(): Matrix4x4;
    invert(out: Matrix4x4): void;
    static billboard(objectPosition: Vector3, cameraPosition: Vector3, cameraRight: Vector3, cameraUp: Vector3, cameraForward: Vector3, mat: Matrix4x4): void;
    identity(): void;
    cloneTo(destObject: any): void;
    clone(): any;
    static translation(v3: Vector3, out: Matrix4x4): void;
    getTranslationVector(out: Vector3): void;
    setTranslationVector(translate: Vector3): void;
    getForward(out: Vector3): void;
    setForward(forward: Vector3): void;
}
