import { Bitmap } from "./Bitmap";
export declare class BaseTexture extends Bitmap {
    static WARPMODE_REPEAT: number;
    static WARPMODE_CLAMP: number;
    static FILTERMODE_POINT: number;
    static FILTERMODE_BILINEAR: number;
    static FILTERMODE_TRILINEAR: number;
    static FORMAT_R8G8B8: number;
    static FORMAT_R8G8B8A8: number;
    static FORMAT_ALPHA8: number;
    static FORMAT_DXT1: number;
    static FORMAT_DXT5: number;
    static FORMAT_ETC1RGB: number;
    static FORMAT_PVRTCRGB_2BPPV: number;
    static FORMAT_PVRTCRGBA_2BPPV: number;
    static FORMAT_PVRTCRGB_4BPPV: number;
    static FORMAT_PVRTCRGBA_4BPPV: number;
    static RENDERTEXTURE_FORMAT_RGBA_HALF_FLOAT: number;
    static FORMAT_DEPTH_16: number;
    static FORMAT_STENCIL_8: number;
    static FORMAT_DEPTHSTENCIL_16_8: number;
    static FORMAT_DEPTHSTENCIL_NONE: number;
    protected _readyed: boolean;
    protected _glTextureType: number;
    protected _glTexture: any;
    protected _format: number;
    protected _mipmap: boolean;
    protected _wrapModeU: number;
    protected _wrapModeV: number;
    protected _filterMode: number;
    protected _anisoLevel: number;
    protected _mipmapCount: number;
    readonly mipmap: boolean;
    readonly format: number;
    wrapModeU: number;
    wrapModeV: number;
    filterMode: number;
    anisoLevel: number;
    readonly mipmapCount: number;
    readonly defaulteTexture: BaseTexture;
    constructor(format: number, mipMap: boolean);
    protected _getFormatByteCount(): number;
    protected _isPot(size: number): boolean;
    protected _getGLFormat(): number;
    protected _setFilterMode(value: number): void;
    protected _setWarpMode(orientation: number, mode: number): void;
    protected _setAnisotropy(value: number): void;
    protected _disposeResource(): void;
    generateMipmap(): void;
}
