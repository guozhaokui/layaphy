import { Bone } from "./Bone";
import { BoneSlot } from "./BoneSlot";
import { AnimationPlayer } from "../AnimationPlayer";
import { GraphicsAni } from "../GraphicsAni";
import { Sprite } from "../../display/Sprite";
import { Handler } from "../../utils/Handler";
import { Texture } from "../../resource/Texture";
import { Templet } from "../../ani/bone/Templet";
export declare class Skeleton extends Sprite {
    static useSimpleMeshInCanvas: boolean;
    protected _templet: Templet;
    protected _player: AnimationPlayer;
    protected _curOriginalData: Float32Array;
    private _boneMatrixArray;
    private _lastTime;
    private _currAniIndex;
    private _pause;
    protected _aniClipIndex: number;
    protected _clipIndex: number;
    private _skinIndex;
    private _skinName;
    private _aniMode;
    private _graphicsCache;
    private _boneSlotDic;
    private _bindBoneBoneSlotDic;
    private _boneSlotArray;
    private _index;
    private _total;
    private _indexControl;
    private _aniPath;
    private _complete;
    private _loadAniMode;
    private _yReverseMatrix;
    private _ikArr;
    private _tfArr;
    private _pathDic;
    private _rootBone;
    protected _boneList: Bone[];
    protected _aniSectionDic: any;
    private _eventIndex;
    private _drawOrderIndex;
    private _drawOrder;
    private _lastAniClipIndex;
    private _lastUpdateAniClipIndex;
    private _playAudio;
    private _soundChannelArr;
    constructor(templet?: Templet, aniMode?: number);
    init(templet: Templet, aniMode?: number): void;
    url: string;
    load(path: string, complete?: Handler, aniMode?: number): void;
    private _onLoaded;
    private _parseComplete;
    private _parseFail;
    private _onPlay;
    private _onStop;
    private _onPause;
    private _parseSrcBoneMatrix;
    private _emitMissedEvents;
    private _update;
    private _onAniSoundStoped;
    protected _createGraphics(_clipIndex?: number): GraphicsAni;
    private _checkIsAllParsed;
    private _setDeform;
    getAnimNum(): number;
    getAniNameByIndex(index: number): string;
    getSlotByName(name: string): BoneSlot;
    showSkinByName(name: string, freshSlotIndex?: boolean): void;
    showSkinByIndex(skinIndex: number, freshSlotIndex?: boolean): void;
    showSlotSkinByIndex(slotName: string, index: number): void;
    showSlotSkinByName(slotName: string, name: string): void;
    replaceSlotSkinName(slotName: string, oldName: string, newName: string): void;
    replaceSlotSkinByIndex(slotName: string, oldIndex: number, newIndex: number): void;
    setSlotSkin(slotName: string, texture: Texture): void;
    private _clearCache;
    play(nameOrIndex: any, loop: boolean, force?: boolean, start?: number, end?: number, freshSkin?: boolean, playAudio?: boolean): void;
    stop(): void;
    playbackRate(value: number): void;
    paused(): void;
    resume(): void;
    private _getGrahicsDataWithCache;
    private _setGrahicsDataWithCache;
    destroy(destroyChild?: boolean): void;
    index: number;
    readonly total: number;
    readonly player: AnimationPlayer;
    readonly templet: Templet;
}
