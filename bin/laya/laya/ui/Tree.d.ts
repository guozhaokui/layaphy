import { Box } from "./Box";
import { IRender } from "./IRender";
import { List } from "./List";
import { ScrollBar } from "./ScrollBar";
import { Event } from "../events/Event";
import { Handler } from "../utils/Handler";
export declare class Tree extends Box implements IRender {
    protected _list: List;
    protected _source: any[];
    protected _renderHandler: Handler;
    protected _spaceLeft: number;
    protected _spaceBottom: number;
    protected _keepStatus: boolean;
    constructor();
    destroy(destroyChild?: boolean): void;
    protected createChildren(): void;
    protected onListChange(e?: Event): void;
    keepStatus: boolean;
    array: any[];
    readonly source: any[];
    readonly list: List;
    itemRender: any;
    scrollBarSkin: string;
    readonly scrollBar: ScrollBar;
    mouseHandler: Handler;
    renderHandler: Handler;
    spaceLeft: number;
    spaceBottom: number;
    selectedIndex: number;
    selectedItem: any;
    width: number;
    height: number;
    protected getArray(): any[];
    protected getDepth(item: any, num?: number): number;
    protected getParentOpenStatus(item: any): boolean;
    protected renderItem(cell: Box, index: number): void;
    private onArrowClick;
    setItemState(index: number, isOpen: boolean): void;
    fresh(): void;
    dataSource: any;
    xml: XMLDocument;
    protected parseXml(xml: ChildNode, source: any[], nodeParent: any, isRoot: boolean): void;
    protected parseOpenStatus(oldSource: any[], newSource: any[]): void;
    protected isSameParent(item1: any, item2: any): boolean;
    readonly selectedPath: string;
    filter(key: string): void;
    private getFilterSource;
}
