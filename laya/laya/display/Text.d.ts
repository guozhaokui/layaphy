import { Sprite } from "./Sprite";
import { BitmapFont } from "./BitmapFont";
import { SpriteStyle } from "./css/SpriteStyle";
import { TextStyle } from "./css/TextStyle";
import { Point } from "../maths/Point";
import { Rectangle } from "../maths/Rectangle";
import { WordText } from "../utils/WordText";
export declare class Text extends Sprite {
    static VISIBLE: string;
    static SCROLL: string;
    static HIDDEN: string;
    static defaultFontSize: number;
    static defaultFont: string;
    static defaultFontStr(): string;
    static langPacks: any;
    static isComplexText: boolean;
    static fontFamilyMap: any;
    static _testWord: string;
    private static _bitmapFonts;
    static CharacterCache: boolean;
    static RightToLeft: boolean;
    private _clipPoint;
    protected _text: string;
    protected _isChanged: boolean;
    protected _textWidth: number;
    protected _textHeight: number;
    protected _lines: any[];
    protected _lineWidths: any[];
    protected _startX: number;
    protected _startY: number;
    protected _words: WordText[];
    protected _charSize: any;
    protected _valign: string;
    private _singleCharRender;
    overflow: string;
    constructor();
    getStyle(): SpriteStyle;
    protected _getTextStyle(): TextStyle;
    static registerBitmapFont(name: string, bitmapFont: BitmapFont): void;
    static unregisterBitmapFont(name: string, destroy?: boolean): void;
    destroy(destroyChild?: boolean): void;
    getGraphicBounds(realSize?: boolean): Rectangle;
    width: number;
    height: number;
    readonly textWidth: number;
    readonly textHeight: number;
    text: string;
    get_text(): string;
    set_text(value: string): void;
    lang(text: string, arg1?: any, arg2?: any, arg3?: any, arg4?: any, arg5?: any, arg6?: any, arg7?: any, arg8?: any, arg9?: any, arg10?: any): void;
    font: string;
    fontSize: number;
    bold: boolean;
    color: string;
    get_color(): string;
    set_color(value: string): void;
    italic: boolean;
    align: string;
    valign: string;
    wordWrap: boolean;
    leading: number;
    padding: any[];
    bgColor: string;
    set_bgColor(value: string): void;
    get_bgColor(): string;
    borderColor: string;
    stroke: number;
    strokeColor: string;
    protected isChanged: boolean;
    protected _getContextFont(): string;
    protected _isPassWordMode(): boolean;
    protected _getPassWordTxt(txt: string): string;
    protected _renderText(): void;
    private _drawUnderline;
    typeset(): void;
    private _evalTextSize;
    private _checkEnabledViewportOrNot;
    changeText(text: string): void;
    protected _parseLines(text: string): void;
    protected _parseLine(line: string, wordWrapWidth: number): void;
    private _getTextWidth;
    private _getWordWrapWidth;
    getCharPoint(charIndex: number, out?: Point): Point;
    scrollX: number;
    scrollY: number;
    readonly maxScrollX: number;
    readonly maxScrollY: number;
    readonly lines: any[];
    underlineColor: string;
    underline: boolean;
    singleCharRender: boolean;
}
