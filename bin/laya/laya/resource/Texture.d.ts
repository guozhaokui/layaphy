import { Texture2D } from "./Texture2D";
import { EventDispatcher } from "../events/EventDispatcher";
import { Handler } from "../utils/Handler";
export declare class Texture extends EventDispatcher {
    static DEF_UV: Float32Array;
    static NO_UV: Float32Array;
    static INV_UV: Float32Array;
    private static _rect1;
    private static _rect2;
    uvrect: any[];
    private _destroyed;
    private _bitmap;
    _uv: ArrayLike<number>;
    private _referenceCount;
    $_GID: number;
    offsetX: number;
    offsetY: number;
    private _w;
    private _h;
    sourceWidth: number;
    sourceHeight: number;
    url: string;
    scaleRate: number;
    static moveUV(offsetX: number, offsetY: number, uv: any[]): any[];
    static create(source: Texture2D | Texture, x: number, y: number, width: number, height: number, offsetX?: number, offsetY?: number, sourceWidth?: number, sourceHeight?: number): Texture;
    static createFromTexture(texture: Texture, x: number, y: number, width: number, height: number): Texture;
    uv: ArrayLike<number>;
    width: number;
    height: number;
    bitmap: Texture2D | Texture;
    readonly destroyed: boolean;
    constructor(bitmap?: Texture2D | Texture, uv?: ArrayLike<number>, sourceWidth?: number, sourceHeight?: number);
    private _onLoaded;
    getIsReady(): boolean;
    setTo(bitmap?: Texture2D | Texture, uv?: ArrayLike<number>, sourceWidth?: number, sourceHeight?: number): void;
    load(url: string, complete?: Handler): void;
    getTexturePixels(x: number, y: number, width: number, height: number): Uint8Array;
    getPixels(x: number, y: number, width: number, height: number): Uint8Array;
    recoverBitmap(onok?: Function): void;
    disposeBitmap(): void;
    destroy(force?: boolean): void;
}
