import { BaseTexture } from "../../resource/BaseTexture";
import { IClone } from "../core/IClone";
import { Matrix4x4 } from "../math/Matrix4x4";
import { Quaternion } from "../math/Quaternion";
import { Vector2 } from "../math/Vector2";
import { Vector3 } from "../math/Vector3";
import { Vector4 } from "../math/Vector4";
export declare class ShaderData implements IClone {
    addDefine(define: number): void;
    removeDefine(define: number): void;
    hasDefine(define: number): boolean;
    clearDefine(): void;
    getBool(index: number): boolean;
    setBool(index: number, value: boolean): void;
    getInt(index: number): number;
    setInt(index: number, value: number): void;
    getNumber(index: number): number;
    setNumber(index: number, value: number): void;
    getVector2(index: number): Vector2;
    setVector2(index: number, value: Vector2): void;
    getVector3(index: number): Vector3;
    setVector3(index: number, value: Vector3): void;
    getVector(index: number): Vector4;
    setVector(index: number, value: Vector4): void;
    getQuaternion(index: number): Quaternion;
    setQuaternion(index: number, value: Quaternion): void;
    getMatrix4x4(index: number): Matrix4x4;
    setMatrix4x4(index: number, value: Matrix4x4): void;
    getBuffer(shaderIndex: number): Float32Array;
    setBuffer(index: number, value: Float32Array): void;
    setTexture(index: number, value: BaseTexture): void;
    getTexture(index: number): BaseTexture;
    setAttribute(index: number, value: Int32Array): void;
    getAttribute(index: number): any[];
    getLength(): number;
    setLength(value: number): void;
    cloneTo(destObject: any): void;
    clone(): any;
    cloneToForNative(destObject: any): void;
    needRenewArrayBufferForNative(index: number): void;
    getDataForNative(): any[];
    setReferenceForNative(value: any): number;
    static setRuntimeValueMode(bReference: boolean): void;
    clearRuntimeCopyArray(): void;
}
