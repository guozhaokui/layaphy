import { Vector4 } from "../../math/Vector4";
import { BaseMaterial } from "./BaseMaterial";
import { BaseTexture } from "../../../resource/BaseTexture";
export declare class BlinnPhongMaterial extends BaseMaterial {
    static SPECULARSOURCE_DIFFUSEMAPALPHA: number;
    static SPECULARSOURCE_SPECULARMAP: number;
    static RENDERMODE_OPAQUE: number;
    static RENDERMODE_CUTOUT: number;
    static RENDERMODE_TRANSPARENT: number;
    static SHADERDEFINE_DIFFUSEMAP: number;
    static SHADERDEFINE_NORMALMAP: number;
    static SHADERDEFINE_SPECULARMAP: number;
    static SHADERDEFINE_TILINGOFFSET: number;
    static SHADERDEFINE_ENABLEVERTEXCOLOR: number;
    static ALBEDOTEXTURE: number;
    static NORMALTEXTURE: number;
    static SPECULARTEXTURE: number;
    static ALBEDOCOLOR: number;
    static MATERIALSPECULAR: number;
    static SHININESS: number;
    static TILINGOFFSET: number;
    static CULL: number;
    static BLEND: number;
    static BLEND_SRC: number;
    static BLEND_DST: number;
    static DEPTH_TEST: number;
    static DEPTH_WRITE: number;
    static defaultMaterial: BlinnPhongMaterial;
    private _albedoColor;
    private _albedoIntensity;
    private _enableLighting;
    private _enableVertexColor;
    renderMode: number;
    enableVertexColor: boolean;
    tilingOffsetX: number;
    tilingOffsetY: number;
    tilingOffsetZ: number;
    tilingOffsetW: number;
    tilingOffset: Vector4;
    albedoColorR: number;
    albedoColorG: number;
    albedoColorB: number;
    albedoColorA: number;
    albedoColor: Vector4;
    albedoIntensity: number;
    specularColorR: number;
    specularColorG: number;
    specularColorB: number;
    specularColorA: number;
    specularColor: Vector4;
    shininess: number;
    albedoTexture: BaseTexture;
    normalTexture: BaseTexture;
    specularTexture: BaseTexture;
    enableLighting: boolean;
    depthWrite: boolean;
    cull: number;
    blend: number;
    blendSrc: number;
    blendDst: number;
    depthTest: number;
    constructor();
    clone(): any;
    cloneTo(destObject: any): void;
}
