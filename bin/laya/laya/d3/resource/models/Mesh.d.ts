import { Resource } from "../../../resource/Resource";
import { Handler } from "../../../utils/Handler";
import { Bounds } from "../../core/Bounds";
import { IClone } from "../../core/IClone";
import { VertexDeclaration } from "../../graphics/VertexDeclaration";
import { Color } from "../../math/Color";
import { Matrix4x4 } from "../../math/Matrix4x4";
import { Vector2 } from "../../math/Vector2";
import { Vector3 } from "../../math/Vector3";
import { Vector4 } from "../../math/Vector4";
import { SubMesh } from "./SubMesh";
export declare class Mesh extends Resource implements IClone {
    static MESH: string;
    static load(url: string, complete: Handler): void;
    readonly inverseAbsoluteBindPoses: Matrix4x4[];
    readonly vertexCount: number;
    readonly indexCount: number;
    readonly subMeshCount: number;
    bounds: Bounds;
    constructor(isReadable?: boolean);
    protected _disposeResource(): void;
    getSubMesh(index: number): SubMesh;
    getPositions(positions: Vector3[]): void;
    setPositions(positions: Vector3[]): void;
    getColors(colors: Color[]): void;
    setColors(colors: Color[]): void;
    getUVs(uvs: Vector2[], channel?: number): void;
    setUVs(uvs: Vector2[], channel?: number): void;
    getNormals(normals: Vector3[]): void;
    setNormals(normals: Vector3[]): void;
    getTangents(tangents: Vector4[]): void;
    setTangents(tangents: Vector4[]): void;
    getBoneWeights(boneWeights: Vector4[]): void;
    setBoneWeights(boneWeights: Vector4[]): void;
    getBoneIndices(boneIndices: Vector4[]): void;
    setBoneIndices(boneIndices: Vector4[]): void;
    markAsUnreadbale(): void;
    getVertexDeclaration(): VertexDeclaration;
    getVertices(): ArrayBuffer;
    setVertices(vertices: ArrayBuffer): void;
    getIndices(): Uint16Array;
    setIndices(indices: Uint16Array): void;
    calculateBounds(): void;
    cloneTo(destObject: any): void;
    clone(): any;
}
