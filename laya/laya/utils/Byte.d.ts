export declare class Byte {
    static BIG_ENDIAN: string;
    static LITTLE_ENDIAN: string;
    private static _sysEndian;
    protected _xd_: boolean;
    private _allocated_;
    protected _d_: any;
    protected _u8d_: any;
    protected _pos_: number;
    protected _length: number;
    static getSystemEndian(): string;
    constructor(data?: any);
    readonly buffer: ArrayBuffer;
    endian: string;
    length: number;
    private _resizeBuffer;
    getString(): string;
    readString(): string;
    getFloat32Array(start: number, len: number): any;
    readFloat32Array(start: number, len: number): any;
    getUint8Array(start: number, len: number): Uint8Array;
    readUint8Array(start: number, len: number): Uint8Array;
    getInt16Array(start: number, len: number): any;
    readInt16Array(start: number, len: number): any;
    getFloat32(): number;
    readFloat32(): number;
    getFloat64(): number;
    readFloat64(): number;
    writeFloat32(value: number): void;
    writeFloat64(value: number): void;
    getInt32(): number;
    readInt32(): number;
    getUint32(): number;
    readUint32(): number;
    writeInt32(value: number): void;
    writeUint32(value: number): void;
    getInt16(): number;
    readInt16(): number;
    getUint16(): number;
    readUint16(): number;
    writeUint16(value: number): void;
    writeInt16(value: number): void;
    getUint8(): number;
    readUint8(): number;
    writeUint8(value: number): void;
    private _rUTF;
    getCustomString(len: number): string;
    readCustomString(len: number): string;
    pos: number;
    readonly bytesAvailable: number;
    clear(): void;
    writeUTFBytes(value: string): void;
    writeUTFString(value: string): void;
    readUTFString(): string;
    getUTFString(): string;
    readUTFBytes(len?: number): string;
    getUTFBytes(len?: number): string;
    writeByte(value: number): void;
    readByte(): number;
    getByte(): number;
    writeArrayBuffer(arraybuffer: any, offset?: number, length?: number): void;
    readArrayBuffer(length: number): ArrayBuffer;
}
