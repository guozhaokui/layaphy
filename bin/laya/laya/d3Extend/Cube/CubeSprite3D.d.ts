import { CubeGeometry } from "./CubeGeometry";
import { CubeInfo } from "./CubeInfo";
import { CubeMap } from "./CubeMap";
import { PixelLineSprite3D } from "laya/d3/core/pixelLine/PixelLineSprite3D";
import { PixelLineFilter } from "laya/d3/core/pixelLine/PixelLineFilter";
import { RenderableSprite3D } from "laya/d3/core/RenderableSprite3D";
import { CubeInfoArray } from "../worldMaker/CubeInfoArray";
export declare class CubeSprite3D extends RenderableSprite3D {
    static MAXCUBES: number;
    _cubeGeometry: CubeGeometry;
    Layer: number;
    _enableEditer: boolean;
    UpdataCube: CubeInfoArray[];
    CubeNums: number;
    enableRender: boolean;
    readonly enableEditer: boolean;
    constructor(cubeSprite3D?: CubeSprite3D, name?: string);
    AddCube(x: number, y: number, z: number, color: number, layer?: number, isSetData?: boolean): number;
    RemoveCube(x: number, y: number, z: number, isSetData?: boolean): number;
    UpdataColor(x: number, y: number, z: number, color: number): number;
    UpdataProperty(x: number, y: number, z: number, Property: number): number;
    deletNoFaceCube(): void;
    UpdataAo(x: number, y: number, z: number): void;
    FindCube(x: number, y: number, z: number): number;
    RemoveAllCube(): void;
    clearEditerInfo(): void;
    private voxfile;
    loadFileData(url: string): void;
    private _src;
    src: string;
    _parse(data: any): void;
    isReady: boolean;
    loadByArrayBuffer(arrayBuffer: ArrayBuffer): void;
    VectorCubeRevertCubeInfoArray(cubearray: CubeInfo[]): CubeInfoArray;
    AddCubeByArray(cubeInfoArray: CubeInfoArray): void;
    returnArrayValues: number[];
    AddCubes(cubeInfoArray: CubeInfoArray, isUpdataAo?: boolean): number[];
    RemoveCubes(cubeInfoArray: CubeInfoArray, CalAo?: boolean): number[];
    UpdateColors(cubeInfoArray: CubeInfoArray, color: number): number[];
    CalCubeAos(cubeInfoArray: CubeInfoArray): void;
    cubeMeshSpriteLines: PixelLineSprite3D;
    cubeMeshSpriteLinesFill: PixelLineFilter;
    private StarPoint;
    private EndPoint;
    protected lineCount: number;
    selectCube: CubeInfo;
    selectCubeMap: CubeMap;
    drawLineFace(index: number, x: number, y: number, z: number, isSetData: boolean): void;
    private cubeMeshSpriteKey;
    SelectCube(x: number, y: number, z: number, isSetData?: boolean, IsFanXuan?: boolean): number;
    SelectCubes(cubeInfoarray: CubeInfoArray, isFanXuan?: boolean): number[];
    drawoneLine(LineIndex: number, startx: number, starty: number, startz: number, endx: number, endy: number, endz: number, IssetData: boolean): void;
    CancelSelect(cubeInfoCan: CubeInfo, IsSetData: boolean): void;
    CancelDrawOneFace(LineIndex: number, IssetData: boolean): void;
    CancelDrawOneLine(LineIndex: number, IssetData: boolean): void;
    LineClear(): void;
    SelectAllCube(): void;
    destroy(destroyChild?: boolean): void;
    cubeTrans(isTran?: boolean): void;
}
