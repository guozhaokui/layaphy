import { Sprite } from "./Sprite";
import { Node } from "./Node";
import { Matrix } from "../maths/Matrix";
import { Point } from "../maths/Point";
import { Context } from "../resource/Context";
export declare class Stage extends Sprite {
    static SCALE_NOSCALE: string;
    static SCALE_EXACTFIT: string;
    static SCALE_SHOWALL: string;
    static SCALE_NOBORDER: string;
    static SCALE_FULL: string;
    static SCALE_FIXED_WIDTH: string;
    static SCALE_FIXED_HEIGHT: string;
    static SCALE_FIXED_AUTO: string;
    static ALIGN_LEFT: string;
    static ALIGN_RIGHT: string;
    static ALIGN_CENTER: string;
    static ALIGN_TOP: string;
    static ALIGN_MIDDLE: string;
    static ALIGN_BOTTOM: string;
    static SCREEN_NONE: string;
    static SCREEN_HORIZONTAL: string;
    static SCREEN_VERTICAL: string;
    static FRAME_FAST: string;
    static FRAME_SLOW: string;
    static FRAME_MOUSE: string;
    static FRAME_SLEEP: string;
    focus: Node;
    offset: Point;
    private _frameRate;
    designWidth: number;
    designHeight: number;
    canvasRotation: boolean;
    canvasDegree: number;
    renderingEnabled: boolean;
    screenAdaptationEnabled: boolean;
    _canvasTransform: Matrix;
    private _screenMode;
    private _scaleMode;
    private _alignV;
    private _alignH;
    private _bgColor;
    private _mouseMoveTime;
    private _renderCount;
    private _safariOffsetY;
    private _frameStartTime;
    private _previousOrientation;
    private _isFocused;
    private _isVisibility;
    private _globalRepaintSet;
    private _globalRepaintGet;
    static _dbgSprite: Sprite;
    useRetinalCanvas: boolean;
    constructor();
    private _isInputting;
    width: number;
    height: number;
    transform: Matrix;
    readonly isFocused: boolean;
    readonly isVisibility: boolean;
    private _changeCanvasSize;
    protected _resetCanvas(): void;
    setScreenSize(screenWidth: number, screenHeight: number): void;
    private _formatData;
    scaleMode: string;
    alignH: string;
    alignV: string;
    bgColor: string;
    readonly mouseX: number;
    readonly mouseY: number;
    getMousePoint(): Point;
    readonly clientScaleX: number;
    readonly clientScaleY: number;
    screenMode: string;
    repaint(type?: number): void;
    parentRepaint(type?: number): void;
    getFrameTm(): number;
    private _onmouseMove;
    getTimeFromFrameStart(): number;
    visible: boolean;
    static clear: Function;
    render(context: Context, x: number, y: number): void;
    renderToNative(context: Context, x: number, y: number): void;
    private _updateTimers;
    fullScreenEnabled: boolean;
    frameRate: string;
    private _requestFullscreen;
    private _fullScreenChanged;
    exitFullscreen(): void;
    isGlobalRepaint(): boolean;
    setGlobalRepaint(): void;
    add3DUI(uibase: Sprite): void;
    remove3DUI(uibase: Sprite): boolean;
}
