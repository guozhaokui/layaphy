import { Vector3 } from "./Vector3";
import { Plane } from "./Plane";
import { BoundBox } from "./BoundBox";
import { BoundSphere } from "./BoundSphere";
import { Ray } from "./Ray";
export declare class CollisionUtils {
    constructor();
    static distancePlaneToPoint(plane: Plane, point: Vector3): number;
    static distanceBoxToPoint(box: BoundBox, point: Vector3): number;
    static distanceBoxToBox(box1: BoundBox, box2: BoundBox): number;
    static distanceSphereToPoint(sphere: BoundSphere, point: Vector3): number;
    static distanceSphereToSphere(sphere1: BoundSphere, sphere2: BoundSphere): number;
    static intersectsRayAndTriangleRD(ray: Ray, vertex1: Vector3, vertex2: Vector3, vertex3: Vector3, out: number): boolean;
    static intersectsRayAndTriangleRP(ray: Ray, vertex1: Vector3, vertex2: Vector3, vertex3: Vector3, out: Vector3): boolean;
    static intersectsRayAndPoint(ray: Ray, point: Vector3): boolean;
    static intersectsRayAndRay(ray1: Ray, ray2: Ray, out: Vector3): boolean;
    static intersectsPlaneAndTriangle(plane: Plane, vertex1: Vector3, vertex2: Vector3, vertex3: Vector3): number;
    static intersectsRayAndPlaneRD(ray: Ray, plane: Plane, out: number): boolean;
    static intersectsRayAndPlaneRP(ray: Ray, plane: Plane, out: Vector3): boolean;
    static intersectsRayAndBoxRD(ray: Ray, box: BoundBox): number;
    static intersectsRayAndBoxRP(ray: Ray, box: BoundBox, out: Vector3): number;
    static intersectsRayAndSphereRD(ray: Ray, sphere: BoundSphere): number;
    static intersectsRayAndSphereRP(ray: Ray, sphere: BoundSphere, out: Vector3): number;
    static intersectsSphereAndTriangle(sphere: BoundSphere, vertex1: Vector3, vertex2: Vector3, vertex3: Vector3): boolean;
    static intersectsPlaneAndPoint(plane: Plane, point: Vector3): number;
    static intersectsPlaneAndPlane(plane1: Plane, plane2: Plane): boolean;
    static intersectsPlaneAndPlaneRL(plane1: Plane, plane2: Plane, line: Ray): boolean;
    static intersectsPlaneAndBox(plane: Plane, box: BoundBox): number;
    static intersectsPlaneAndSphere(plane: Plane, sphere: BoundSphere): number;
    static intersectsBoxAndBox(box1: BoundBox, box2: BoundBox): boolean;
    static intersectsBoxAndSphere(box: BoundBox, sphere: BoundSphere): boolean;
    static intersectsSphereAndSphere(sphere1: BoundSphere, sphere2: BoundSphere): boolean;
    static boxContainsPoint(box: BoundBox, point: Vector3): number;
    static boxContainsBox(box1: BoundBox, box2: BoundBox): number;
    static boxContainsSphere(box: BoundBox, sphere: BoundSphere): number;
    static sphereContainsPoint(sphere: BoundSphere, point: Vector3): number;
    static sphereContainsTriangle(sphere: BoundSphere, vertex1: Vector3, vertex2: Vector3, vertex3: Vector3): number;
    static sphereContainsBox(sphere: BoundSphere, box: BoundBox): number;
    static sphereContainsSphere(sphere1: BoundSphere, sphere2: BoundSphere): number;
    static closestPointPointTriangle(point: Vector3, vertex1: Vector3, vertex2: Vector3, vertex3: Vector3, out: Vector3): void;
    static closestPointPlanePoint(plane: Plane, point: Vector3, out: Vector3): void;
    static closestPointBoxPoint(box: BoundBox, point: Vector3, out: Vector3): void;
    static closestPointSpherePoint(sphere: BoundSphere, point: Vector3, out: Vector3): void;
    static closestPointSphereSphere(sphere1: BoundSphere, sphere2: BoundSphere, out: Vector3): void;
}
